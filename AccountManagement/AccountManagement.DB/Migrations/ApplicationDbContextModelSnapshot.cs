// <auto-generated />
using System;
using AccountManagement.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AccountManagement.DB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AccountManagement.DB.Domain.Account", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("code")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("account_number");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("money")
                        .HasColumnName("outstanding_balance");

                    b.Property<int>("PersonCode")
                        .HasColumnType("int")
                        .HasColumnName("person_code");

                    b.HasKey("Code");

                    b.HasIndex("PersonCode");

                    b.HasIndex(new[] { "AccountNumber" }, "IX_Account_num")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AccountManagement.DB.Domain.AccountStatus", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("code")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountCode")
                        .HasColumnType("int")
                        .HasColumnName("account_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("status")
                        .IsFixedLength(true);

                    b.HasKey("Code");

                    b.HasIndex("AccountCode");

                    b.ToTable("AccountStatus");
                });

            modelBuilder.Entity("AccountManagement.DB.Domain.Person", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("code")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id_number");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("surname");

                    b.HasKey("Code");

                    b.HasIndex(new[] { "IdNumber" }, "IX_Person_id")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("AccountManagement.DB.Domain.Transaction", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("code")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountCode")
                        .HasColumnType("int")
                        .HasColumnName("account_code");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CaptureDate")
                        .HasColumnType("datetime")
                        .HasColumnName("capture_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_date");

                    b.HasKey("Code");

                    b.HasIndex("AccountCode");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AccountManagement.DB.Domain.Account", b =>
                {
                    b.HasOne("AccountManagement.DB.Domain.Person", "PersonCodeNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("PersonCode")
                        .HasConstraintName("FK_Account_Person")
                        .IsRequired();

                    b.Navigation("PersonCodeNavigation");
                });

            modelBuilder.Entity("AccountManagement.DB.Domain.AccountStatus", b =>
                {
                    b.HasOne("AccountManagement.DB.Domain.Account", "Account")
                        .WithMany("AccountStatus")
                        .HasForeignKey("AccountCode")
                        .HasConstraintName("FK_AccountStatus_Accounts")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountManagement.DB.Domain.Transaction", b =>
                {
                    b.HasOne("AccountManagement.DB.Domain.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountCode")
                        .HasConstraintName("FK_Transaction_Account")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountManagement.DB.Domain.Account", b =>
                {
                    b.Navigation("AccountStatus");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AccountManagement.DB.Domain.Person", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
